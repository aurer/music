import { h, render, Component } from '../lib/preact.js';
import Tracks from './Tracks.js';
import Paging from './Paging.js';
import Scrobbler from '../services/scrobbler.js';
const scrobbler = new Scrobbler('philmau', 'ccfce33b35f8480c2413f2a642fa2c6a');

class App extends Component {
  constructor() {
    super();
    this.state = {
      page: 1,
      total: 0,
      perPage: 10,
      totalPages: 0,
      tracks: Array.apply({}, Array(10))
    };
  }

  componentWillMount() {
    this.fetchTracks();
  }

  handlePaging(page) {
    this.setState({
      page: page,
      tracks: Array.apply({}, Array(this.state.perPage))
    }, this.fetchTracks);
  }

  fetchTracks() {
    scrobbler.getRecentTracks(this.state.perPage, this.state.page).then(data => {
      let attr = data.recenttracks['@attr'];
      this.setState({
        page: parseInt(attr.page),
        total: parseInt(attr.total),
        perPage: parseInt(attr.perPage),
        totalPages: parseInt(attr.totalPages),
        tracks: data.recenttracks.track
      });
    });
  }

  render(props, {
    tracks,
    page,
    total,
    perPage,
    totalPages
  }) {
    return h("div", {
      class: "App"
    }, h(Paging, {
      page: page,
      totalPages: totalPages,
      onPage: this.handlePaging.bind(this)
    }), h("main", {
      class: "App-main"
    }, h(Tracks, {
      tracks: tracks.slice(0, this.state.perPage),
      page: page
    })));
  }

}

export default App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvQXBwLmpzIl0sIm5hbWVzIjpbImgiLCJyZW5kZXIiLCJDb21wb25lbnQiLCJUcmFja3MiLCJQYWdpbmciLCJTY3JvYmJsZXIiLCJzY3JvYmJsZXIiLCJBcHAiLCJjb25zdHJ1Y3RvciIsInN0YXRlIiwicGFnZSIsInRvdGFsIiwicGVyUGFnZSIsInRvdGFsUGFnZXMiLCJ0cmFja3MiLCJBcnJheSIsImFwcGx5IiwiY29tcG9uZW50V2lsbE1vdW50IiwiZmV0Y2hUcmFja3MiLCJoYW5kbGVQYWdpbmciLCJzZXRTdGF0ZSIsImdldFJlY2VudFRyYWNrcyIsInRoZW4iLCJkYXRhIiwiYXR0ciIsInJlY2VudHRyYWNrcyIsInBhcnNlSW50IiwidHJhY2siLCJwcm9wcyIsImJpbmQiLCJzbGljZSJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsQ0FBVCxFQUFZQyxNQUFaLEVBQW9CQyxTQUFwQixRQUFzQyxrQkFBdEM7QUFDQSxPQUFPQyxNQUFQLE1BQW1CLGFBQW5CO0FBQ0EsT0FBT0MsTUFBUCxNQUFtQixhQUFuQjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsMEJBQXRCO0FBQ0EsTUFBTUMsU0FBUyxHQUFHLElBQUlELFNBQUosQ0FBYyxTQUFkLEVBQXlCLGtDQUF6QixDQUFsQjs7QUFFQSxNQUFNRSxHQUFOLFNBQWtCTCxTQUFsQixDQUE0QjtBQUMzQk0sRUFBQUEsV0FBVyxHQUFHO0FBQ2I7QUFDQSxTQUFLQyxLQUFMLEdBQWE7QUFDWkMsTUFBQUEsSUFBSSxFQUFFLENBRE07QUFFWkMsTUFBQUEsS0FBSyxFQUFFLENBRks7QUFHWkMsTUFBQUEsT0FBTyxFQUFFLEVBSEc7QUFJWkMsTUFBQUEsVUFBVSxFQUFFLENBSkE7QUFLWkMsTUFBQUEsTUFBTSxFQUFFQyxLQUFLLENBQUNDLEtBQU4sQ0FBWSxFQUFaLEVBQWdCRCxLQUFLLENBQUMsRUFBRCxDQUFyQjtBQUxJLEtBQWI7QUFPQTs7QUFFREUsRUFBQUEsa0JBQWtCLEdBQUc7QUFDcEIsU0FBS0MsV0FBTDtBQUNBOztBQUVEQyxFQUFBQSxZQUFZLENBQUNULElBQUQsRUFBTztBQUNsQixTQUFLVSxRQUFMLENBQ0M7QUFDQ1YsTUFBQUEsSUFBSSxFQUFFQSxJQURQO0FBRUNJLE1BQUFBLE1BQU0sRUFBRUMsS0FBSyxDQUFDQyxLQUFOLENBQVksRUFBWixFQUFnQkQsS0FBSyxDQUFDLEtBQUtOLEtBQUwsQ0FBV0csT0FBWixDQUFyQjtBQUZULEtBREQsRUFLQyxLQUFLTSxXQUxOO0FBT0E7O0FBRURBLEVBQUFBLFdBQVcsR0FBRztBQUNiWixJQUFBQSxTQUFTLENBQUNlLGVBQVYsQ0FBMEIsS0FBS1osS0FBTCxDQUFXRyxPQUFyQyxFQUE4QyxLQUFLSCxLQUFMLENBQVdDLElBQXpELEVBQStEWSxJQUEvRCxDQUFvRUMsSUFBSSxJQUFJO0FBQzNFLFVBQUlDLElBQUksR0FBR0QsSUFBSSxDQUFDRSxZQUFMLENBQWtCLE9BQWxCLENBQVg7QUFDQSxXQUFLTCxRQUFMLENBQWM7QUFDYlYsUUFBQUEsSUFBSSxFQUFFZ0IsUUFBUSxDQUFDRixJQUFJLENBQUNkLElBQU4sQ0FERDtBQUViQyxRQUFBQSxLQUFLLEVBQUVlLFFBQVEsQ0FBQ0YsSUFBSSxDQUFDYixLQUFOLENBRkY7QUFHYkMsUUFBQUEsT0FBTyxFQUFFYyxRQUFRLENBQUNGLElBQUksQ0FBQ1osT0FBTixDQUhKO0FBSWJDLFFBQUFBLFVBQVUsRUFBRWEsUUFBUSxDQUFDRixJQUFJLENBQUNYLFVBQU4sQ0FKUDtBQUtiQyxRQUFBQSxNQUFNLEVBQUVTLElBQUksQ0FBQ0UsWUFBTCxDQUFrQkU7QUFMYixPQUFkO0FBT0EsS0FURDtBQVVBOztBQUVEMUIsRUFBQUEsTUFBTSxDQUFDMkIsS0FBRCxFQUFRO0FBQUVkLElBQUFBLE1BQUY7QUFBVUosSUFBQUEsSUFBVjtBQUFnQkMsSUFBQUEsS0FBaEI7QUFBdUJDLElBQUFBLE9BQXZCO0FBQWdDQyxJQUFBQTtBQUFoQyxHQUFSLEVBQXNEO0FBQzNELFdBQ0M7QUFBSyxNQUFBLEtBQUssRUFBQztBQUFYLE9BQ0MsRUFBQyxNQUFEO0FBQVEsTUFBQSxJQUFJLEVBQUVILElBQWQ7QUFBb0IsTUFBQSxVQUFVLEVBQUVHLFVBQWhDO0FBQTRDLE1BQUEsTUFBTSxFQUFFLEtBQUtNLFlBQUwsQ0FBa0JVLElBQWxCLENBQXVCLElBQXZCO0FBQXBELE1BREQsRUFFQztBQUFNLE1BQUEsS0FBSyxFQUFDO0FBQVosT0FDQyxFQUFDLE1BQUQ7QUFBUSxNQUFBLE1BQU0sRUFBRWYsTUFBTSxDQUFDZ0IsS0FBUCxDQUFhLENBQWIsRUFBZ0IsS0FBS3JCLEtBQUwsQ0FBV0csT0FBM0IsQ0FBaEI7QUFBcUQsTUFBQSxJQUFJLEVBQUVGO0FBQTNELE1BREQsQ0FGRCxDQUREO0FBUUE7O0FBaEQwQjs7QUFtRDVCLGVBQWVILEdBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoLCByZW5kZXIsIENvbXBvbmVudCB9ICBmcm9tICcuLi9saWIvcHJlYWN0LmpzJztcclxuaW1wb3J0IFRyYWNrcyBmcm9tICcuL1RyYWNrcy5qcyc7XHJcbmltcG9ydCBQYWdpbmcgZnJvbSAnLi9QYWdpbmcuanMnO1xyXG5pbXBvcnQgU2Nyb2JibGVyIGZyb20gJy4uL3NlcnZpY2VzL3Njcm9iYmxlci5qcyc7XHJcbmNvbnN0IHNjcm9iYmxlciA9IG5ldyBTY3JvYmJsZXIoJ3BoaWxtYXUnLCAnY2NmY2UzM2IzNWY4NDgwYzI0MTNmMmE2NDJmYTJjNmEnKTtcclxuXHJcbmNsYXNzIEFwcCBleHRlbmRzIENvbXBvbmVudCB7XHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5zdGF0ZSA9IHtcclxuXHRcdFx0cGFnZTogMSxcclxuXHRcdFx0dG90YWw6IDAsXHJcblx0XHRcdHBlclBhZ2U6IDEwLFxyXG5cdFx0XHR0b3RhbFBhZ2VzOiAwLFxyXG5cdFx0XHR0cmFja3M6IEFycmF5LmFwcGx5KHt9LCBBcnJheSgxMCkpXHJcblx0XHR9O1xyXG5cdH1cclxuXHJcblx0Y29tcG9uZW50V2lsbE1vdW50KCkge1xyXG5cdFx0dGhpcy5mZXRjaFRyYWNrcygpO1xyXG5cdH1cclxuXHJcblx0aGFuZGxlUGFnaW5nKHBhZ2UpIHtcclxuXHRcdHRoaXMuc2V0U3RhdGUoXHJcblx0XHRcdHtcclxuXHRcdFx0XHRwYWdlOiBwYWdlLFxyXG5cdFx0XHRcdHRyYWNrczogQXJyYXkuYXBwbHkoe30sIEFycmF5KHRoaXMuc3RhdGUucGVyUGFnZSkpXHJcblx0XHRcdH0sXHJcblx0XHRcdHRoaXMuZmV0Y2hUcmFja3NcclxuXHRcdCk7XHJcblx0fVxyXG5cclxuXHRmZXRjaFRyYWNrcygpIHtcclxuXHRcdHNjcm9iYmxlci5nZXRSZWNlbnRUcmFja3ModGhpcy5zdGF0ZS5wZXJQYWdlLCB0aGlzLnN0YXRlLnBhZ2UpLnRoZW4oZGF0YSA9PiB7XHJcblx0XHRcdGxldCBhdHRyID0gZGF0YS5yZWNlbnR0cmFja3NbJ0BhdHRyJ107XHJcblx0XHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHRcdHBhZ2U6IHBhcnNlSW50KGF0dHIucGFnZSksXHJcblx0XHRcdFx0dG90YWw6IHBhcnNlSW50KGF0dHIudG90YWwpLFxyXG5cdFx0XHRcdHBlclBhZ2U6IHBhcnNlSW50KGF0dHIucGVyUGFnZSksXHJcblx0XHRcdFx0dG90YWxQYWdlczogcGFyc2VJbnQoYXR0ci50b3RhbFBhZ2VzKSxcclxuXHRcdFx0XHR0cmFja3M6IGRhdGEucmVjZW50dHJhY2tzLnRyYWNrXHJcblx0XHRcdH0pO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRyZW5kZXIocHJvcHMsIHsgdHJhY2tzLCBwYWdlLCB0b3RhbCwgcGVyUGFnZSwgdG90YWxQYWdlcyB9KSB7XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8ZGl2IGNsYXNzPVwiQXBwXCI+XHJcblx0XHRcdFx0PFBhZ2luZyBwYWdlPXtwYWdlfSB0b3RhbFBhZ2VzPXt0b3RhbFBhZ2VzfSBvblBhZ2U9e3RoaXMuaGFuZGxlUGFnaW5nLmJpbmQodGhpcyl9IC8+XHJcblx0XHRcdFx0PG1haW4gY2xhc3M9XCJBcHAtbWFpblwiPlxyXG5cdFx0XHRcdFx0PFRyYWNrcyB0cmFja3M9e3RyYWNrcy5zbGljZSgwLCB0aGlzLnN0YXRlLnBlclBhZ2UpfSBwYWdlPXtwYWdlfSAvPlxyXG5cdFx0XHRcdDwvbWFpbj5cclxuXHRcdFx0PC9kaXY+XHJcblx0XHQpO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQXBwO1xyXG4iXSwiZmlsZSI6ImNvbXBvbmVudHMvQXBwLmpzIn0=